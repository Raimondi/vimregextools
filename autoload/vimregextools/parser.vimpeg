; Vim regular expression parser

; Parser options {{{1
.skip_white   = false
.namespace    = 'vimregextools#parse'
.parser_name  = 'vimregextools#parser#now'
.root_element = 'regexp'
.ignore_case  = false
.debug        = true
.verbose      = 0

; RegExp syntax {{{1
regexp  ::= legal_flag ? pattern ? escape ? eore                                 -> #regexp
pattern ::= branch ( or branch ) *                                               -> #pattern
or      ::= '\\|'                                                                -> #or
branch  ::= concat ( and concat ) *                                              -> #branch
and     ::= '\\&'                                                                -> #and
concat  ::= piece +                                                              -> #concat
piece   ::= atom multi ? flag *                                                  -> #piece
atom    ::= flag * ( non_capture_group | capture_group | ordinary_atom )         -> #atom
flag    ::= case_flag | magic_flag | ignore_comb_chars -> #flag
; Flags {{{2
legal_flag              ::= case_flag | ignore_comb_chars
ignore_comb_chars       ::= '\\Z'
case_flag               ::= ignore_case | match_case
ignore_case             ::= '\\c'
match_case              ::= '\\C'
magic_flag              ::= magic | no_magic | very_magic | very_no_magic
magic                   ::= '\\m'
no_magic                ::= '\\M'
very_magic              ::= '\\v'
very_no_magic           ::= '\\V'
; Groups {{{2
capture_group           ::= open_capture_group pattern ? close_capture_group         -> #capture_group
non_capture_group       ::= open_non_capture_group pattern ? close_non_capture_group -> #non_capture_group
open_capture_group      ::= '\\('                                                    -> #open_capture_group
open_non_capture_group  ::= '\\%('                                                   -> #open_non_capture_group
close_capture_group     ::= '\\)'                                                    -> #close_capture_group
close_non_capture_group ::= '\\)'                                                    -> #close_non_capture_group
; Quantifiers {{{2
multi    ::= star | plus | equal | question | curly | look_around
star     ::= '*'
plus     ::= '\\+'
equal    ::= '\\='
question ::= '\\?'
curly    ::= start_curly '-' ? lower ? ( ',' upper ? ) ? end_curly                       -> #curly
; Curly items {{{3
start_curly   ::= '\\{'
end_curly     ::= escape ? '}'
non_greedy    ::= '-' greedy ?
greedy        ::= lower ? ( ',' upper ? ) ? | ',' upper
lower         ::= number
upper         ::= number
number        ::= '\d\+'                                -> #number
look_around   ::= at_ahead | at_no_ahead | at_behind | at_no_behind | at_whole
at_ahead      ::= '\\@='
at_no_ahead   ::= '\\@!'
at_behind     ::= '\\@<='
at_no_behind  ::= '\\@<!'
at_whole      ::= '\\@>'
ordinary_atom ::= dot | nl_or_dot | anchor | char_class | collection | sequence | back_reference | last_substitution | char -> #ordinary_atom
; Any {{{2
dot       ::= '\.'
nl_or_dot ::= '\\_\.' -> #nl_or_dot
; Anchors {{{2
anchor ::= eol | bol | bol_any | eol_any | bow | eow | zs | ze | bof | eof | visual | cursor | mark | line | column | virtual_column
; {{{3
bol            ::= '\^'                                 -> #bol
bol_any        ::= '\\_\^'
eol            ::= & '\$\%(\\)\)*\%(\\&\|\\|\|$\)' '\$' -> #eol
eol_any        ::= '\\_\$'
bow            ::= '\\<'
eow            ::= '\\>'
zs             ::= '\\zs'
ze             ::= '\\ze'
bof            ::= '\\%\^'
eof            ::= '\\%\$'
visual         ::= '\\%V'
cursor         ::= '\\%#'
mark           ::= '\\%''' '[[:alnum:]<>[\]''"^.(){}]'    -> #mark
line           ::= '\\%' number 'l'                       -> #mark
column         ::= '\\%' number 'c'                       -> #mark
virtual_column ::= '\\%' number 'v'                       -> #mark
; Collection {{{2
collection       ::= start_collection caret ? coll_inner end_collection -> #collection
coll_inner       ::= ']' ( range | decimal_char | octal_char | hex_char_low | hex_char_medium | hex_char_high | bracket_class | equivalence | collation | !']' coll_char ) * | ( range | decimal_char | octal_char | hex_char_low | hex_char_medium | hex_char_high | bracket_class | equivalence | collation | !']' coll_char ) + -> #coll_inner; {{{3
start_collection ::= coll_nl_or_start | coll_start       -> #start_collection
end_collection   ::= '\]'               -> #end_collection
coll_start       ::= '\['              -> #coll_start
coll_nl_or_start ::= '\\_['              -> #coll_nl_or_start
caret            ::= '\^'               -> #caret
range            ::= range_char '-' range_char      -> #range
range_char       ::= decimal_char | octal_char | hex_char_low | hex_char_medium | hex_char_high | coll_char
decimal_char     ::= '\\d' '\d\+' -> #decimal_char
octal_char       ::= '\\o' '[0-7]\{1,4}' -> #decimal_char
hex_char_low     ::= '\\x' '[0-9a-f]\{1,2}' -> #decimal_char
hex_char_medium  ::= '\\u' '[0-9a-f]\{1,4}' -> #decimal_char
hex_char_high    ::= '\\U' '[0-9a-f]\{1,8}' -> #decimal_char
; Bracket character classes {{{2
bracket_class       ::= '\[:' ( bc_alpha | bc_alnum | bc_blank | bc_cntrl | bc_digit | bc_graph | bc_lower | bc_print | bc_punct | bc_space | bc_upper | bc_xdigit | bc_return | bc_tab | bc_escape | bc_backspace ) ':\]' -> #bracket_class
; Bracket items {{{3
bc_alpha            ::= 'alpha'
bc_alnum            ::= 'alnum'
bc_blank            ::= 'blank'
bc_cntrl            ::= 'cntrl'
bc_digit            ::= 'digit'
bc_graph            ::= 'graph'
bc_lower            ::= 'lower'
bc_print            ::= 'print'
bc_punct            ::= 'punct'
bc_space            ::= 'space'
bc_upper            ::= 'upper'
bc_xdigit           ::= 'xdigit'
bc_return           ::= 'return'
bc_tab              ::= 'tab'
bc_escape           ::= 'escape'
bc_backspace        ::= 'backspace'
coll_char           ::= esc | tab | cr | bs | lb | !'\]' ( '\\\\' | '\\]' | '.' ) -> #coll_char
; Sequence {{{2
sequence          ::= start_sequence ( collection | seq_char ) + end_sequence -> #sequence
; Sequence items {{{3
seq_char          ::= seq_escaped_char | !']' '.'
seq_escaped_char  ::= esc | tab | cr | bs | lb | '\\.'
start_sequence    ::= '\\%['
end_sequence      ::= '\]'
equivalence       ::= '\[=' char '=\]'   -> #equivalence
collation         ::= '\[\.' char '\.\]' -> #equivalence
back_reference    ::= '\\[1-9]'
last_substitution ::= '\~'
; Character classes {{{2
char_class ::= char_or_nl_classes | char_classes -> #char_class
; Char classes items {{{3
char_or_nl_classes         ::= nl_or_identifier | nl_or_identifier_no_digits | nl_or_keyword | nl_or_non_keyword | nl_or_file_name | nl_or_file_name_no_digits |  nl_or_printable | nl_or_printable_no_digits | nl_or_whitespace | nl_or_non_whitespace | nl_or_digit | nl_or_non_digit | nl_or_hex_digit | nl_or_non_hex_digit | nl_or_octal_digit | nl_or_non_octal_digit | nl_or_word | nl_or_non_word | nl_or_head | nl_or_non_head | nl_or_alpha | nl_or_non_alpha | nl_or_lowercase | nl_or_non_lowercase | nl_or_uppercase | nl_or_non_uppercase
char_classes               ::= identifier | identifier_no_digits | keyword | non_keyword | file_name | file_name_no_digits |  printable | printable_no_digits | whitespace | non_whitespace | digit | non_digit | hex_digit | non_hex_digit | octal_digit | non_octal_digit | word | non_word | head | non_head | alpha | non_alpha | lowercase | non_lowercase | uppercase | non_uppercase
underscore                 ::= '_'
identifier                 ::= '\\i'
nl_or_identifier           ::= '\\_i'
identifier_no_digits       ::= '\\I'
nl_or_identifier_no_digits ::= '\\_I'
keyword                    ::= '\\k'
nl_or_keyword              ::= '\\_k'
non_keyword                ::= '\\K'
nl_or_non_keyword          ::= '\\_K'
file_name                  ::= '\\f'
nl_or_file_name            ::= '\\_f'
file_name_no_digits        ::= '\\F'
nl_or_file_name_no_digits  ::= '\\_F'
printable                  ::= '\\p'
nl_or_printable            ::= '\\_p'
printable_no_digits        ::= '\\P'
nl_or_printable_no_digits  ::= '\\_P'
whitespace                 ::= '\\s'
nl_or_whitespace           ::= '\\_s'
non_whitespace             ::= '\\S'
nl_or_non_whitespace       ::= '\\_S'
digit                      ::= '\\d'
nl_or_digit                ::= '\\_d'
non_digit                  ::= '\\D'
nl_or_non_digit            ::= '\\_D'
hex_digit                  ::= '\\x'
nl_or_hex_digit            ::= '\\_x'
non_hex_digit              ::= '\\X'
nl_or_non_hex_digit        ::= '\\_X'
octal_digit                ::= '\\o'
nl_or_octal_digit          ::= '\\_o'
non_octal_digit            ::= '\\O'
nl_or_non_octal_digit      ::= '\\_O'
word                       ::= '\\w'
nl_or_word                 ::= '\\_w'
non_word                   ::= '\\W'
nl_or_non_word             ::= '\\_W'
head                       ::= '\\h'
nl_or_head                 ::= '\\_h'
non_head                   ::= '\\H'
nl_or_non_head             ::= '\\_H'
alpha                      ::= '\\a'
nl_or_alpha                ::= '\\_a'
non_alpha                  ::= '\\A'
nl_or_non_alpha            ::= '\\_A'
lowercase                  ::= '\\l'
nl_or_lowercase            ::= '\\_l'
non_lowercase              ::= '\\L'
nl_or_non_lowercase        ::= '\\_L'
uppercase                  ::= '\\u'
nl_or_uppercase            ::= '\\_u'
non_uppercase              ::= '\\U'
nl_or_non_uppercase        ::= '\\_U'
; Char items {{{3
char         ::= escaped_char | '[^\\[.]'
escaped_char ::= esc | tab | cr | bs | lb | tilde | period | '\\' '[^+=?&|@%{}()]' -> #escaped_char
tilde        ::= '\\\~'
period       ::= '\\\.'
esc          ::= '\\e'
tab          ::= '\\t'
cr           ::= '\\r'
bs           ::= '\\b'
lb           ::= '\\n'
escape       ::= '\\'
bore         ::= '\_^'
; End of regular expression {{{2
eore         ::= '\_$'
