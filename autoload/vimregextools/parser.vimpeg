; Vim regular expression parser

.skip_white   = false
.namespace    = 'vimregextools#parse'
.parser_name  = 'vimregextools#parser#now'
.root_element = 'regexp'
.ignore_case  = false
.debug        = true
.verbose      = 0

regexp                 ::= legal_flag ? pattern ? escape ? eor -> #regexp
pattern                ::= branch ( or branch ) *   -> #pattern
or                     ::= '\\|'                    -> #or
branch                 ::= concat ( and concat ) *  -> #branch
and                    ::= '\\&'                    -> #and
concat                 ::= piece +                  -> #concat
piece                  ::= atom multi ? flag *      -> #piece
atom                   ::= flag * ( non_capture_group | capture_group | ordinary_atom )
flag                   ::= case_flag | magic_flag | ignore_comb_chars -> #flag
legal_flag             ::= case_flag | ignore_comb_chars -> #legal_flag
ignore_comb_chars      ::= '\\Z'                         -> #ignore_comb_chars
case_flag              ::= ignore_case | match_case      -> #case_flag
ignore_case            ::= '\\c'                         -> #ignore_case
match_case             ::= '\\C'                         -> #match_case
magic_flag             ::= magic | no_magic | very_magic | very_no_magic -> #magic_flag
magic                  ::= '\\m' -> #magic
no_magic               ::= '\\M' -> #no_magic
very_magic             ::= '\\v' -> #very_magic
very_no_magic          ::= '\\V' -> #very_no_magic
capture_group          ::= open_capture_group pattern ? close_group -> #capture_group
non_capture_group      ::= open_non_capture_group pattern ? close_group -> #non_capture_group
open_capture_group     ::= '\\('  -> #open_capture_group
open_non_capture_group ::= '\\%(' -> #open_non_capture_group
close_group            ::= '\\)'  -> #close_group
multi                  ::= star | plus | equal | question | curly | at -> #multi
star                   ::= '*'   -> #star
plus                   ::= '\\+' -> #plus
equal                  ::= '\\=' -> #equal
question               ::= '\\?' -> #question
curly                  ::= start_curly ( greedy | non_greedy ) ? end_curly -> #curly
start_curly            ::= '\\{'                             -> #start_curly
end_curly              ::= escape ? '}'                      -> #end_curly
non_greedy             ::= '-' greedy ?                      -> #non_greedy
greedy                 ::= lower ( ',' upper ) ? | ',' upper -> #greedy
lower                  ::= number                            -> #lower
upper                  ::= number                            -> #upper
number                 ::= '\d\+'                            -> #number
at                     ::= at_ahead | at_no_ahead | at_behind | at_no_behind | at_whole -> #at
at_ahead               ::= '\\@='  -> #at_ahead
at_no_ahead            ::= '\\@!'  -> #at_no_ahead
at_behind              ::= '\\@<=' -> #at_behind
at_no_behind           ::= '\\@<!' -> #at_no_behind
at_whole               ::= '\\@>'  -> #at_whole
ordinary_atom          ::= dot | nl_or_dot | anchor | char_class | collection | sequence | back_reference | last_substitution | char -> #ordinary_atom
dot                    ::= '\.'    -> #dot
nl_or_dot              ::= '\\_\.' -> #nl_or_dot
; Anchors
anchor         ::= bol | bol_any | eol | eol_any | bow | eow | zs | ze | bof | eof | visual | cursor | mark | line | column | virtual_column -> #anchor
bol            ::= '\^'                             -> #bol
bol_any        ::= '\\_\^'                          -> #bol_any
eol            ::= '\$'                             -> #eol
eol_any        ::= '\\_\$'                          -> #eol_any
bow            ::= '\\<'                            -> #bow
eow            ::= '\\>'                            -> #eow
zs             ::= '\\zs'                           -> #zs
ze             ::= '\\ze'                           -> #ze
bof            ::= '\\%\$'                          -> #bof
eof            ::= '\\%\^'                          -> #eof
visual         ::= '\\%V'                           -> #visual
cursor         ::= '\\%#'                           -> #cursor
mark           ::= '\\%''[[:alnum:]<>[\]''"^.(){}]' -> #mark
line           ::= '\\%\d\+l'                       -> #line
column         ::= '\\%\d\+c'                       -> #column
virtual_column ::= '\\%\d\+v'                       -> #virtual_column
char_class     ::= identifier | identifier_no_digits | keyword | non_keyword | file_name | file_name_no_digits |  printable | printable_no_digits | whitespace | non_whitespace | digit | non_digit | hex_digit | non_hex_digit | octal_digit | non_octal_digit | word | non_word | head | non_head | alpha | non_alpha | lowercase | non_lowercase | uppercase | non_uppercase | nl_or_identifier | nl_or_identifier_no_digits | nl_or_keyword | nl_or_non_keyword | nl_or_file_name | nl_or_file_name_no_digits |  nl_or_printable | nl_or_printable_no_digits | nl_or_whitespace | nl_or_non_whitespace | nl_or_digit | nl_or_non_digit | nl_or_hex_digit | nl_or_non_hex_digit | nl_or_octal_digit | nl_or_non_octal_digit | nl_or_word | nl_or_non_word | nl_or_head | nl_or_non_head | nl_or_alpha | nl_or_non_alpha | nl_or_lowercase | nl_or_non_lowercase | nl_or_uppercase | nl_or_non_uppercase -> #char_class
; Collection
collection       ::= start_collection caret ? ( ']' coll_inner * | coll_inner + ) end_collection -> #collection
coll_inner       ::= range | decimal_char | octal_char | hex_char_low | hex_char_medium | hex_char_high | bracket_class | equivalence | collation | !']' coll_char
start_collection ::= nl_or ? '\['       -> #start_collection
end_collection   ::= '\]'               -> #end_collection
nl_or            ::= '\\_'              -> #nl_or
caret            ::= '\^'               -> #caret
range            ::= char '-' char      -> #range
decimal_char     ::= '\\d\d\+'          -> #decimal_char
octal_char       ::= '\\o[0-7]\{1,4}'    -> #octal_char
hex_char_low     ::= '\\x[0-9a-f]\{1,2}' -> #hex_char_low
hex_char_medium  ::= '\\u[0-9a-f]\{1,4}' -> #hex_char_medium
hex_char_high    ::= '\\U[0-9a-f]\{1,8}' -> #hex_char_high
; Bracket character classes
bracket_class ::= '[:' ( bc_alpha | bc_alnum | bc_blank | bc_cntrl | bc_digit | bc_graph | bc_lower | bc_print | bc_punct | bc_space | bc_upper | bc_xdigit | bc_return | bc_tab | bc_escape | bc_backspace ) ':]' -> #bracket_class
bc_alpha      ::= 'alpha'             -> #bc_alpha
bc_alnum      ::= 'alnum'             -> #bc_alnum
bc_blank      ::= 'blank'             -> #bc_blank
bc_cntrl      ::= 'cntrl'             -> #bc_cntrl
bc_digit      ::= 'digit'             -> #bc_digit
bc_graph      ::= 'graph'             -> #bc_graph
bc_lower      ::= 'lower'             -> #bc_lower
bc_print      ::= 'print'             -> #bc_print
bc_punct      ::= 'punct'             -> #bc_punct
bc_space      ::= 'space'             -> #bc_space
bc_upper      ::= 'upper'             -> #bc_upper
bc_xdigit     ::= 'xdigit'            -> #bc_xdigit
bc_return     ::= 'return'            -> #bc_return
bc_tab        ::= 'tab'               -> #bc_tab
bc_escape     ::= 'escape'            -> #bc_escape
bc_backspace  ::= 'backspace'         -> #bc_backspace
coll_char     ::= !end_collection ( '\\]' | '.' ) -> #coll_char
; Sequence
sequence          ::= start_sequence ( collection | seq_char ) + end_sequence -> #sequence
seq_char          ::= seq_escaped_char | !']' '.'      -> #seq_char
seq_escaped_char  ::= esc | tab | cr | bs | lb | '\\.' -> #seq_escaped_char
start_sequence    ::= '\\%['             -> #start_sequence
end_sequence      ::= '\]'               -> #end_sequence
equivalence       ::= '\[=' char '=\]'   -> #equivalence
collation         ::= '\[\.' char '\.\]' -> #collation
back_reference    ::= '\\[1-9]'          -> #back_reference
last_substitution ::= '\~'               -> #last_substitution
; Character classes
identifier                 ::= '\\i'  -> #identifier
nl_or_identifier           ::= '\\_i' -> #nl_or_identifier
identifier_no_digits       ::= '\\I'  -> #identifier_no_digits
nl_or_identifier_no_digits ::= '\\_I' -> #nl_or_identifier_no_digits
keyword                    ::= '\\k'  -> #keyword
nl_or_keyword              ::= '\\_k' -> #nl_or_keyword
non_keyword                ::= '\\K'  -> #non_keyword
nl_or_non_keyword          ::= '\\_K' -> #nl_or_non_keyword
file_name                  ::= '\\f'  -> #file_name
nl_or_file_name            ::= '\\_f' -> #nl_or_file_name
file_name_no_digits        ::= '\\F'  -> #file_name_no_digits
nl_or_file_name_no_digits  ::= '\\_F' -> #nl_or_file_name_no_digits
printable                  ::= '\\p'  -> #printable
nl_or_printable            ::= '\\_p' -> #nl_or_printable
printable_no_digits        ::= '\\P'  -> #printable_no_digits
nl_or_printable_no_digits  ::= '\\_P' -> #nl_or_printable_no_digits
whitespace                 ::= '\\s'  -> #whitespace
nl_or_whitespace           ::= '\\_s' -> #nl_or_whitespace
non_whitespace             ::= '\\S'  -> #non_whitespace
nl_or_non_whitespace       ::= '\\_S' -> #nl_or_non_whitespace
digit                      ::= '\\d'  -> #digit
nl_or_digit                ::= '\\_d' -> #nl_or_digit
non_digit                  ::= '\\D'  -> #non_digit
nl_or_non_digit            ::= '\\_D' -> #nl_or_non_digit
hex_digit                  ::= '\\x'  -> #hex_digit
nl_or_hex_digit            ::= '\\_x' -> #nl_or_hex_digit
non_hex_digit              ::= '\\X'  -> #non_hex_digit
nl_or_non_hex_digit        ::= '\\_X' -> #nl_or_non_hex_digit
octal_digit                ::= '\\o'  -> #octal_digit
nl_or_octal_digit          ::= '\\_o' -> #nl_or_octal_digit
non_octal_digit            ::= '\\O'  -> #non_octal_digit
nl_or_non_octal_digit      ::= '\\_O' -> #nl_or_non_octal_digit
word                       ::= '\\w'  -> #word
nl_or_word                 ::= '\\_w' -> #nl_or_word
non_word                   ::= '\\W'  -> #non_word
nl_or_non_word             ::= '\\_W' -> #nl_or_non_word
head                       ::= '\\h'  -> #head
nl_or_head                 ::= '\\_h' -> #nl_or_head
non_head                   ::= '\\H'  -> #non_head
nl_or_non_head             ::= '\\_H' -> #nl_or_non_head
alpha                      ::= '\\a'  -> #alpha
nl_or_alpha                ::= '\\_a' -> #nl_or_alpha
non_alpha                  ::= '\\A'  -> #non_alpha
nl_or_non_alpha            ::= '\\_A' -> #nl_or_non_alpha
lowercase                  ::= '\\l'  -> #lowercase
nl_or_lowercase            ::= '\\_l' -> #nl_or_lowercase
non_lowercase              ::= '\\L'  -> #non_lowercase
nl_or_non_lowercase        ::= '\\_L' -> #nl_or_non_lowercase
uppercase                  ::= '\\u'  -> #uppercase
nl_or_uppercase            ::= '\\_u' -> #nl_or_uppercase
non_uppercase              ::= '\\U'  -> #non_uppercase
nl_or_non_uppercase        ::= '\\_U' -> #nl_or_non_uppercase
; Char
char                       ::= escaped_char | '[^\\[.]' -> #char
escaped_char               ::= esc | tab | cr | bs | lb | '\\[^+=?&|@%{}()]' -> #escaped_char

esc                        ::= '\\e' -> #esc
tab                        ::= '\\t' -> #tab
cr                         ::= '\\r' -> #cr
bs                         ::= '\\b' -> #bs
lb                         ::= '\\n' -> #lb
escape                     ::= '\\'  -> #escape
eor                        ::= '$'   -> #eor
; ['\C', [['\m', ['\%(', ['^', ['\|', '|']], '\)']], ['\s', '*'], '\zs', ['\%(', [['\<', 'f', 'u', ['\%[', ['n', 'c', 't', 'i', 'o', 'n'], ']'], '\>'], [['\|', ['\<', ['\%(', [['w', 'h', ['\%[', ['i', 'l', 'e'], ']']], ['\|', ['f', 'o', 'r']]], '\)'], '\>']], ['\|', ['\<', 'i', 'f', '\>']], ['\|', ['\<', 't', 'r', 'y', '\>']], ['\|', ['\<', 'a', 'u', 'g', ['\%[', ['r', 'o', 'u', 'p'], ']'], ['\s', '\+'], [['\%(', ['E', 'N', 'D', '\>'], '\)'], '\@!'], '\S']]]], '\)']]]
